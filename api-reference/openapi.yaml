openapi: 3.0.3
info:
  title: NPC Builder - API
  description: >
    This is the latest NPC Builder API specification that defines a comprehensive, production-ready API for NPC Builder. The API is divided into three primary services:


    **Interactions Service**  
      - **Purpose:** Enables dynamic, context-aware conversations between players and NPC characters.


    **Context Service**  
      - **Purpose:** Manages in-game entities to build and maintain immersive game environments.
      - **Includes:**  
        - **Worlds:** Create, update, and delete game worlds.
        - **Regions:** Define and manage distinct regions within a world.
        - **Locations:** Handle specific locations within regions.
        - **Characters:** Manage the lifecycle (creation, updating, deletion) of NPC characters.


    **Sessions Service**  
      - **Purpose:** Manages player sessions to maintain game context and track interactions.


    Overall, this specification serves as a detailed guide to leveraging NPC Builder’s services—empowering developers to build rich, interactive experiences while efficiently managing game contexts and entities.
        _You must stick to the data structure defined, otherwise you may encounter unhandled errors_


    **Please check the schemas of each request to find the allowed values for certain properties.**


    _Technical Limitations: Character's knowledge and relationships updating and deleting are not available through the API. They must be managed through our app's frontend._


    Some useful links:

    - [Our website](https://npcbuilder.com)

    - [The App](https://app.npcbuilder.com)
    
  termsOfService: https://npcbuilder.com/terms-and-conditions/
  contact:
    email: support@npcbuilder.com
  version: 1.5.0
servers:
  - url: https://app.npcbuilder.com/api
tags:
  - name: Interactions
    description: Manage your NPCs text conversations and interactive responses.
  - name: Characters
    description: Manage characters in your game including creation, update, and deletion.
  - name: Worlds
    description: Create and manage immersive worlds for your game.
  - name: Regions
    description: Define and manage regions within your worlds.
  - name: Locations
    description: Manage specific locations within regions of your game.
  - name: Sessions
    description: Create, retrieve, and delete player sessions for enhanced game management.
paths:
  /interactions:
    post:
      tags:
        - Interactions
      summary: Obtain a response from an NPC character
      description: >
        Send an array of interaction messages between the player and the NPC character.
        The API processes the conversation history and returns a new response generated by the character.
      operationId: addInteraction
      parameters:
        - name: language
          in: query
          description: >
            The language code for the interaction. Supported values include:
            - **en-US**: English (United States)
            - **es-ES**: Spanish (Spain)
          required: true
          schema:
            type: string
            enum:
              - en-US
              - es-ES
            example: en-US
        - name: session_id
          in: query
          description: (Optional) The unique identifier for the player's session.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        description: >
          A JSON, XML, or URL-encoded payload containing the complete conversation history. 
          Ensure messages are sent as an array of objects following the defined schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interaction'
          application/xml:
            schema:
              $ref: '#/components/schemas/Interaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Interaction'
        required: true
      responses:
        '200':
          description: >
            Successful operation. Returns the character's response along with any triggered user events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '206':
          description: >
            Partial content due to maximum length reached. The response may be truncated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxLength'
            application/xml:
              schema:
                $ref: '#/components/schemas/MaxLength'
        '401':
          description: Unauthorized – No valid token was provided.
          content:
            application/json:
              example: "Unauthorized, no token provided"
        '403':
          description: Forbidden – Invalid token provided. Try generating a new token.
          content:
            application/json:
              example: "Unauthorized, invalid token provided. Try generating a new token."
        '409':
          description: >
            Conflict – Operation not allowed due to usage limits, non-existent objects, or unimplemented features.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorNoContext'
                  - $ref: '#/components/schemas/ErrorUsageLimit'
                  - $ref: '#/components/schemas/ErrorNotImplemented'
        '500':
          description: >
            Internal Server Error – An error occurred while processing the interaction.
          content:
            application/json:
              example: "Error creating interaction"
      security:
        - npcbuilder_auth: []
  /context/characters/{game_id}/{world_id}:
    post:
      summary: Create a new character
      tags:
        - Characters
      description: >
        Create a new character within the specified game and world.
        Provide details such as age, description, gender, items, events, quests, role, tone, and traits.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: region_id
          in: query
          required: false
          description: The unique identifier for the region.
          schema:
            type: string
            example: "region789"
        - name: location_id
          in: query
          required: false
          description: The unique identifier for the location.
          schema:
            type: string
            example: "location789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The character data required to create a new character.
        content:
          application/json:
            schema:
              type: object
              properties:
                age:
                  type: string
                  description: The age category of the character.
                  enum:
                    - infant
                    - child
                    - teenager
                    - youngAdult
                    - adult
                    - middleAged
                    - elderly
                  example: "adult"
                description:
                  type: string
                  description: A brief description of the character's background.
                  example: "A brave warrior with a mysterious past."
                gender:
                  type: string
                  description: The gender of the character.
                  example: "Male"
                model:
                  type: string
                  description: The AI model used to power character interactions. Premium models are available only for some subscriptions.
                  enum: 
                    - standard
                    - premium
                  example: "standard"
                filters:
                  type: boolean
                  description: >
                    A flag indicating whether to apply filters to the character's responses.
                    Filters can be used to restrict certain types of content or language.
                  enum:
                    - true
                    - false
                  example: true
                items:
                  type: array
                  description: >
                    A list of items associated with the character.
                    Each item must follow one of the predefined schemas based on its type.
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        description: The type of item, determining its schema.
                        enum:
                          - trade
                          - action
                        example: "trade"
                    required:
                      - type
                    oneOf:
                      - description: Schema for items of type "trade"
                        properties:
                          type:
                            type: string
                            enum:
                              - trade
                            example: "trade"
                          itemName:
                            type: string
                            description: The name of the trade item.
                            example: "sword"
                          description:
                            type: string
                            description: A detailed description of the item.
                            example: "A sharp sword."
                          unit:
                            type: string
                            description: The unit in which the item is measured.
                            example: "Piece"
                          value:
                            type: number
                            description: The value or cost of the item.
                            example: 100
                        required:
                          - itemName
                          - unit
                          - value
                      - description: Schema for items of type "action"
                        properties:
                          type:
                            type: string
                            enum:
                              - action
                            example: "action"
                          itemName:
                            type: string
                            description: The name of the action item.
                            example: "Move"
                          description:
                            type: string
                            description: A description of the action.
                            example: "Move to position"
                        required:
                          - itemName
                          - description
                events:
                  type: array
                  description: >
                    A list of events associated with the character.
                    Each event must adhere to the schema defined for its type.
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        description: The type of event.
                        enum:
                          - item
                          - action
                        example: "item"
                    required:
                      - type
                    oneOf:
                      - description: Schema for events of type "action"
                        properties:
                          type:
                            type: string
                            enum:
                              - action
                            example: "action"
                          eventName:
                            type: string
                            description: The name of the event.
                            example: "Attack"
                          description:
                            type: string
                            description: Details of the event.
                            example: "Act of violence against another person."
                        required:
                          - eventName
                      - description: Schema for events of type "item"
                        properties:
                          type:
                            type: string
                            enum:
                              - item
                            example: "item"
                          eventName:
                            type: string
                            description: The name of the event.
                            example: "Give"
                          description:
                            type: string
                            description: Details of the event.
                            example: "Provide an object to a person."
                        required:
                          - eventName
                name:
                  type: string
                  description: The display name of the character.
                  example: "Aragorn"
                quests:
                  type: array
                  description: A list of quests associated with the character.
                  items:
                    type: object
                    properties:
                      description:
                        type: string
                        description: A brief description of the quest.
                        example: "Retrieve the lost artifact."
                      objective:
                        type: string
                        description: The main objective of the quest.
                        example: "Find and return the artifact."
                      reward:
                        type: string
                        description: The reward for completing the quest.
                        example: "500 gold coins"
                role:
                  type: string
                  description: >
                    The role of the character in the game. Determines how the character interacts with the story.
                  enum:
                    - noRole
                    - protagonist
                    - antagonist
                    - secondaryCharacter
                    - tertiaryCharacter
                    - mentor
                    - enemy
                    - villain
                    - rival
                    - shopkeeper
                    - healer
                    - questGiver
                    - innkeeper
                    - guard
                    - familyMember
                    - loveInterest
                    - scientist
                    - politician
                    - criminal
                    - explorer
                    - wizard
                    - ghost
                    - animalCompanion
                    - artificialIntelligence
                  example: "protagonist"
                tone:
                  type: string
                  description: The tone or style of the character's dialogue.
                  enum:
                    - formal
                    - casual
                    - sarcastic
                    - mysterious
                    - emotive
                  example: "mysterious"
                traits:
                  type: array
                  description: A list of personality traits describing the character.
                  items:
                    type: string
                    example: "brave"
      responses:
        '200':
          description: Character created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message with character details.
                    example: "Character: character789 has been created with the following context."
                  character_id:
                    type: string
                    description: UID of the character.
                    example: "character789"
                  character_context:
                    type: object
                    description: The created character context.
                    example:
                      age: "adult"
                      description: "A brave warrior with a mysterious past."
                      gender: "Male"
                      items:
                        - itemName: "sword"
                          unit: "Piece"
                          value: 100
                      name: "Aragorn"
                      quests:
                        - description: "Retrieve the lost artifact."
                          objective: "Find and return the artifact."
                          reward: "500 gold coins"
                      role: "protagonist"
                      tone: "mysterious"
                      traits: ["brave"]
        '400':
          description: >
            Validation error – The request payload did not match the required schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified game, world, or character context was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message detailing potential reasons.
                    example: |
                      Possible reasons:
                      - Character not found
        '500':
          description: >
            Internal Server Error – An error occurred while creating the character.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
  /context/characters/{game_id}/{world_id}/{character_id}:
    patch:
      summary: Update character details
      tags:
        - Characters
      description: >
        Update the details of an existing character.
        Provide any of the updatable fields such as age, description, gender, items, events, quests, role, tone, or traits.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: character_id
          in: path
          required: true
          description: The unique identifier for the character.
          schema:
            type: string
            example: "character789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The character data fields to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                age:
                  type: string
                  description: The age category of the character.
                  enum:
                    - infant
                    - child
                    - teenager
                    - youngAdult
                    - adult
                    - middleAged
                    - elderly
                  example: "adult"
                description:
                  type: string
                  description: A brief description of the character.
                  example: "A brave warrior with a mysterious past."
                gender:
                  type: string
                  description: The gender of the character.
                  example: "Male"
                model:
                  type: string
                  description: The AI model used to power character interactions. Premium models are available only for some subscriptions.
                  enum: 
                    - standard
                    - premium
                  example: "standard"
                filters:
                  type: boolean
                  description: >
                    A flag indicating whether to apply filters to the character's responses.
                    Filters can be used to restrict certain types of content or language.
                  enum:
                    - true
                    - false
                  example: true
                items:
                  type: array
                  description: A list of updated items for the character.
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        description: The type of item.
                        enum:
                          - trade
                          - action
                        example: "trade"
                    required:
                      - type
                    oneOf:
                      - description: Schema for items of type "trade"
                        properties:
                          type:
                            type: string
                            enum:
                              - trade
                            example: "trade"
                          itemName:
                            type: string
                            description: The name of the trade item.
                            example: "sword"
                          description:
                            type: string
                            description: A detailed description of the item.
                            example: "A sharp sword."
                          unit:
                            type: string
                            description: The measurement unit.
                            example: "Piece"
                          value:
                            type: number
                            description: The cost or value of the item.
                            example: 100
                        required:
                          - itemName
                          - unit
                          - value
                      - description: Schema for items of type "action"
                        properties:
                          type:
                            type: string
                            enum:
                              - action
                            example: "action"
                          itemName:
                            type: string
                            description: The name of the action.
                            example: "Move"
                          description:
                            type: string
                            description: A description of the action.
                            example: "Move to position"
                        required:
                          - itemName
                          - description
                events:
                  type: array
                  description: A list of events related to the character.
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        description: The type of event.
                        enum:
                          - item
                          - action
                        example: "item"
                    required:
                      - type
                    oneOf:
                      - description: Schema for events of type "action"
                        properties:
                          type:
                            type: string
                            enum:
                              - action
                            example: "action"
                          eventName:
                            type: string
                            description: The name of the event.
                            example: "Attack"
                          description:
                            type: string
                            description: Detailed event description.
                            example: "Act of violence against another person."
                        required:
                          - eventName
                      - description: Schema for events of type "item"
                        properties:
                          type:
                            type: string
                            enum:
                              - item
                            example: "item"
                          eventName:
                            type: string
                            description: The name of the event.
                            example: "Give"
                          description:
                            type: string
                            description: Detailed event description.
                            example: "Provide an object to a person."
                        required:
                          - eventName
                name:
                  type: string
                  description: The display name of the character.
                  example: "Aragorn"
                quests:
                  type: array
                  description: A list of quests associated with the character.
                  items:
                    type: object
                    properties:
                      description:
                        type: string
                        description: A brief description of the quest.
                        example: "Retrieve the lost artifact."
                      objective:
                        type: string
                        description: The quest's main objective.
                        example: "Find and return the artifact."
                      reward:
                        type: string
                        description: The reward for quest completion.
                        example: "500 gold coins"
                role:
                  type: string
                  description: The role the character plays in the game.
                  enum:
                    - noRole
                    - protagonist
                    - antagonist
                    - secondaryCharacter
                    - tertiaryCharacter
                    - mentor
                    - enemy
                    - villain
                    - rival
                    - shopkeeper
                    - healer
                    - questGiver
                    - innkeeper
                    - guard
                    - familyMember
                    - loveInterest
                    - scientist
                    - politician
                    - criminal
                    - explorer
                    - wizard
                    - ghost
                    - animalCompanion
                    - artificialIntelligence
                  example: "protagonist"
                tone:
                  type: string
                  description: The style or mood of the character's dialogue.
                  enum:
                    - formal
                    - casual
                    - sarcastic
                    - mysterious
                    - emotive
                  example: "mysterious"
                traits:
                  type: array
                  description: A list of personality traits of the character.
                  items:
                    type: string
                    example: "brave"
      responses:
        '200':
          description: Character updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after updating the character.
                    example: "Character: character789 has been updated with the following context."
                  character_id:
                    type: string
                    description: UID of the character.
                    example: "character789"
                  character_context:
                    type: object
                    description: Updated character context data.
                    example:
                      age: "adult"
                      description: "A brave warrior with a mysterious past."
                      gender: "Male"
                      items:
                        - itemName: "sword"
                          unit: "Piece"
                          value: 100
                      name: "Aragorn"
                      quests:
                        - description: "Retrieve the lost artifact."
                          objective: "Find and return the artifact."
                          reward: "500 gold coins"
                      role: "protagonist"
                      tone: "mysterious"
                      traits: ["brave"]
        '400':
          description: >
            Validation error – Request payload did not meet schema requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified character or context does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message with potential reasons.
                    example: |
                      Possible reasons:
                      - Character not found
        '500':
          description: >
            Internal Server Error – An error occurred while updating the character.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    delete:
      summary: Delete a character
      tags:
        - Characters
      description: >
        Remove a character from the specified game and world.
        Use this operation with caution as it permanently deletes the character.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: character_id
          in: path
          required: true
          description: The unique identifier for the character to delete.
          schema:
            type: string
            example: "character789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      responses:
        '200':
          description: Character deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after deletion.
                    example: "Character: character789 has been deleted."
                  character_id:
                    type: string
                    description: UID of the character.
                    example: "character789"
        '500':
          description: >
            Internal Server Error – An error occurred while deleting the character.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
  /context/world/{game_id}/{world_id}:
    post:
      summary: Create a new world
      tags:
        - Worlds
      description: >
        Create a new world within the game.
        Provide world details such as lore, name, creatures, and similar worlds for reference.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The world data required to create a new world.
        content:
          application/json:
            schema:
              type: object
              properties:
                lore:
                  type: string
                  description: Background lore or story of the world.
                  example: "A world where magic and technology coexist."
                name:
                  type: string
                  description: The name of the world.
                  example: "Eldoria"
                creatures:
                  type: string
                  description: A comma-separated list of creatures found in the world.
                  example: "Dragons, Elves"
                similarWorlds:
                  type: array
                  description: A list of worlds that are similar in theme or style.
                  items:
                    type: string
                    example: "Middle Earth"
      responses:
        '200':
          description: World created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message for world creation.
                    example: "World: world456 has been created with the following context."
                  world_id:
                    type: string
                    description: UID of the world.
                    example: "world456"
                  world_context:
                    type: object
                    description: The context details of the created world.
                    example:
                      lore: "A world where magic and technology coexist."
                      name: "Eldoria"
                      creatures: "Dragons, Elves"
                      similarWorlds:
                        - "Middle Earth"
        '400':
          description: >
            Validation error – Request payload did not match the required schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified game context was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message with possible causes.
                    example: |
                      - World with ID [...] not found
        '500':
          description: >
            Internal Server Error – An error occurred while creating the world.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    patch:
      summary: Update world details
      tags:
        - Worlds
      description: >
        Update the details of an existing world. Modify fields such as lore, name, creatures, and similar worlds.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The world data fields to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                lore:
                  type: string
                  description: Updated background lore of the world.
                  example: "A world where magic and technology coexist."
                name:
                  type: string
                  description: Updated name of the world.
                  example: "Eldoria"
                creatures:
                  type: string
                  description: Updated list of creatures.
                  example: "Dragons, Elves"
                similarWorlds:
                  type: array
                  description: Updated list of similar worlds.
                  items:
                    type: string
                    example: "Middle Earth"
      responses:
        '200':
          description: World updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after updating the world.
                    example: "World: world456 has been updated with the following context."
                  world_id:
                    type: string
                    description: UID of the world.
                    example: "world456"
                  world_context:
                    type: object
                    description: The context details of the created world.
                    example:
                      lore: "A world where magic and technology coexist."
                      name: "Eldoria"
                      creatures: "Dragons, Elves"
                      similarWorlds:
                        - "Middle Earth"
        '400':
          description: >
            Validation error – Request payload did not meet the required schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified world was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message with potential reasons.
                    example: |
                      Possible reasons:
                      - World with ID [...] not found
        '500':
          description: >
            Internal Server Error – An error occurred while updating the world.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    delete:
      summary: Delete a world
      tags:
        - Worlds
      description: >
        Delete a world from the game. This operation permanently removes the world and its associated data.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world to be deleted.
          schema:
            type: string
            example: "world456"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      responses:
        '200':
          description: World deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after deletion.
                    example: "World: world456 has been deleted."
                  world_id:
                    type: string
                    description: UID of the world.
                    example: "world456"
        '500':
          description: >
            Internal Server Error – An error occurred while deleting the world.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
  /context/region/{game_id}/{world_id}/{region_id}:
    post:
      summary: Create a new region
      tags:
        - Regions
      description: >
        Create a new region within the specified world.
        Provide details such as lore, name, weather, culture, and political stability.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: region_id
          in: path
          required: true
          description: The unique identifier for the region.
          schema:
            type: string
            example: "region789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The region data required for creating a new region.
        content:
          application/json:
            schema:
              type: object
              properties:
                lore:
                  type: string
                  description: Background lore of the region.
                  example: "A dense forest with hidden secrets."
                name:
                  type: string
                  description: The name of the region.
                  example: "Mystic Forest"
                weather:
                  type: string
                  description: Typical weather conditions in the region.
                  example: "Rainy"
                culture:
                  type: string
                  description: Cultural aspects or traditions of the region.
                  example: "Druidic traditions"
                politicalStability:
                  type: string
                  description: The political stability status of the region.
                  enum:
                    - none
                    - highlyStable
                    - stable
                    - moderatelyStable
                    - unstable
                    - highlyUnstable
                    - anarchy
                  example: "stable"
      responses:
        '200':
          description: Region created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message for region creation.
                    example: "Region: region789 has been created with the following context."
                  region_id:
                    type: string
                    description: UID of the region.
                    example: "region789"
                  region_context:
                    type: object
                    description: The context details of the created region.
                    example:
                      lore: "A dense forest with hidden secrets."
                      name: "Mystic Forest"
                      weather: "Rainy"
                      culture: "Druidic traditions"
                      politicalStability: "stable"
        '400':
          description: >
            Validation error – Request payload did not meet the required schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified world or game context was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message with potential reasons.
                    example: |
                      Possible reasons:
                      - Region with ID [...] not found
        '500':
          description: >
            Internal Server Error – An error occurred while creating the region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    patch:
      summary: Update region details
      tags:
        - Regions
      description: >
        Update the details of an existing region. Modify fields such as lore, name, weather, culture, and political stability.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: region_id
          in: path
          required: true
          description: The unique identifier for the region.
          schema:
            type: string
            example: "region789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The region data fields to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                lore:
                  type: string
                  description: Updated lore of the region.
                  example: "A dense forest with hidden secrets."
                name:
                  type: string
                  description: Updated name of the region.
                  example: "Mystic Forest"
                weather:
                  type: string
                  description: Updated weather conditions.
                  example: "Rainy"
                culture:
                  type: string
                  description: Updated cultural aspects.
                  example: "Druidic traditions"
                politicalStability:
                  type: string
                  description: Updated political stability status.
                  enum:
                    - none
                    - highlyStable
                    - stable
                    - moderatelyStable
                    - unstable
                    - highlyUnstable
                    - anarchy
                  example: "stable"
      responses:
        '200':
          description: Region updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after updating the region.
                    example: "Region: region789 has been updated with the following context."
                  region_id:
                    type: string
                    description: UID of the region.
                    example: "region789"
                  region_context:
                    type: object
                    description: The context details of the created region.
                    example:
                      lore: "A dense forest with hidden secrets."
                      name: "Mystic Forest"
                      weather: "Rainy"
                      culture: "Druidic traditions"
                      politicalStability: "stable"
        '400':
          description: >
            Validation error – Request payload did not meet the required schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified region was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message with potential reasons.
                    example: |
                      Possible reasons:
                      - Region with ID [...] not found
        '500':
          description: >
            Internal Server Error – An error occurred while updating the region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    delete:
      summary: Delete a region
      tags:
        - Regions
      description: >
        Delete an existing region from the specified world.
        This operation permanently removes the region and its related data.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: region_id
          in: path
          required: true
          description: The unique identifier for the region to be deleted.
          schema:
            type: string
            example: "region789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      responses:
        '200':
          description: Region deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after deletion.
                    example: "Region: region789 has been deleted."
                  region_id:
                    type: string
                    description: UID of the region.
                    example: "region789"
        '500':
          description: >
            Internal Server Error – An error occurred while deleting the region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
  /context/location/{game_id}/{world_id}/{location_id}:
    post:
      summary: Create a new location
      tags:
        - Locations
      description: >
        Create a new location within the specified world.
        Provide location details such as lore, name, and role.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: location_id
          in: path
          required: true
          description: The unique identifier for the location.
          schema:
            type: string
            example: "location789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The location data required to create a new location.
        content:
          application/json:
            schema:
              type: object
              properties:
                lore:
                  type: string
                  description: Background lore or description of the location.
                  example: "A bustling market town."
                name:
                  type: string
                  description: The name of the location.
                  example: "Rivertown"
                role:
                  type: string
                  description: >
                    The role or function of the location (e.g., trade hub, residential area).
                  example: "Trade hub"
      responses:
        '200':
          description: Location created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after creating the location.
                    example: "Location: location789 has been created with the following context."
                  location_id:
                    type: string
                    description: UID of the location.
                    example: "location789"
                  location_context:
                    type: object
                    description: The context details of the created location.
                    example:
                      lore: "A bustling market town."
                      name: "Rivertown"
                      role: "Trade hub"
        '400':
          description: >
            Validation error – Request payload did not meet the required schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified location context was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message with potential reasons.
                    example: |
                      Possible reasons:
                      - Location with ID [...] not found
                      - Location with ID [...] not found in region [...]
        '500':
          description: >
            Internal Server Error – An error occurred while creating the location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    patch:
      summary: Update location details
      tags:
        - Locations
      description: >
        Update the details of an existing location. Modify fields such as lore, name, and role.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: location_id
          in: path
          required: true
          description: The unique identifier for the location.
          schema:
            type: string
            example: "location789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      requestBody:
        required: true
        description: The location data fields to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                lore:
                  type: string
                  description: Updated background lore of the location.
                  example: "A bustling market town."
                name:
                  type: string
                  description: Updated name of the location.
                  example: "Rivertown"
                role:
                  type: string
                  description: Updated role of the location.
                  example: "Trade hub"
      responses:
        '200':
          description: Location updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after updating the location.
                    example: "Location: location789 has been updated with the following context."
                  location_id:
                    type: string
                    description: UID of the location.
                    example: "location789"
                  location_context:
                    type: object
                    description: The context details of the created location.
                    example:
                      lore: "A bustling market town."
                      name: "Rivertown"
                      role: "Trade hub"
        '400':
          description: >
            Validation error – Request payload did not meet schema requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            Not Found – The specified location was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message with potential reasons.
                    example: |
                      Possible reasons:
                      - Location with ID [...] not found
                      - Location with ID [...] not found in region [...]
        '500':
          description: >
            Internal Server Error – An error occurred while updating the location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    delete:
      summary: Delete a location
      tags:
        - Locations
      description: >
        Delete an existing location from the specified world.
        This operation permanently removes the location and its associated data.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The unique identifier for the game.
          schema:
            type: string
            example: "game123"
        - name: world_id
          in: path
          required: true
          description: The unique identifier for the world.
          schema:
            type: string
            example: "world456"
        - name: location_id
          in: path
          required: true
          description: The unique identifier for the location to be deleted.
          schema:
            type: string
            example: "location789"
        - name: session_id
          in: query
          description: (Optional) The player's session ID.
          required: false
          schema:
            type: string
            example: "60Z5aZjIuFlyYbjbZZKe"
      responses:
        '200':
          description: Location deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after deletion.
                    example: "Location: location789 has been deleted."
                  location_id:
                    type: string
                    description: UID of the location.
                    example: "location789"
        '500':
          description: >
            Internal Server Error – An error occurred while deleting the location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
  /sessionmanager:
    post:
      summary: Create a new session
      tags:
        - Sessions
      description: >
        Create a new player session for a specific game.
        A session ties a player to a game context and is used for tracking interactions & specific context.
      requestBody:
        required: true
        description: The session details required to create a new session.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: Session created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message including session details.
                    example: "Session created for key: campaign_nightfall with id: ABC123 has been created"
                  session_key:
                    type: string
                  session_id:
                    type: string
                  player_id:
                    type: string
                    format: uuidv4
        '400':
          description: >
            Validation error – The session request payload did not meet the required schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict – Session already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the session already exists.
                    example: "Session already existing for key: campaign_nightfall. Please delete it before creating a new one."
                  session_id:
                    type: string
        '500':
          description: >
            Internal Server Error – An error occurred while creating the session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    get:
      summary: Retrieve session information
      tags:
        - Sessions
      description: >
        Retrieve details of an existing session using the session key, game ID, and player ID.
      parameters:
        - in: query
          name: session_key
          description: The session key identifying the session.
          schema:
            type: string
            pattern: ^[a-zA-Z0-9_-]+$
            maxLength: 50
          required: true
          example: "campaign_nightfall"
        - in: query
          name: game_id
          description: The unique identifier for the game.
          schema:
            type: string
            maxLength: 50
          required: true
          example: "game_12345"
        - in: query
          name: player_id
          description: The unique identifier for the player.
          schema:
            type: string
            format: uuidv4
          required: true
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Session retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message with session details.
                    example: "Session for key: campaign_nightfall with id: ABC123"
                  session_id:
                    type: string
                  session_key:
                    type: string
                  player_id:
                    type: string
                    format: uuidv4
        '404':
          description: >
            Not Found – No session matches the provided details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the session was not found.
                    example: "Session for key: campaign_nightfall not found"
        '500':
          description: >
            Internal Server Error – An error occurred while retrieving the session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
    delete:
      summary: Delete a session
      tags:
        - Sessions
      description: >
        Delete an existing session using the session key, game ID, and player ID.
        This operation permanently removes the session.
      parameters:
        - in: query
          name: session_key
          description: The session key identifying the session.
          schema:
            type: string
            pattern: ^[a-zA-Z0-9_-]+$
            maxLength: 50
          required: true
          example: "campaign_nightfall"
        - in: query
          name: game_id
          description: The unique identifier for the game.
          schema:
            type: string
            maxLength: 50
          required: true
          example: "game_12345"
        - in: query
          name: player_id
          description: The unique identifier for the player.
          schema:
            type: string
            format: uuidv4
          required: true
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Session deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message after deletion.
                    example: "Session for key: campaign_nightfall with id: ABC123 has been deleted"
                  session_id:
                    type: string
        '500':
          description: >
            Internal Server Error – An error occurred while deleting the session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - npcbuilder_auth: []
components:
  schemas:
    Interaction:
      type: object
      description: >
        The Interaction schema defines the structure for a conversation between a player and an NPC.
        It includes metadata such as character ID, game ID, world ID, and an array of messages.
      properties:
        character_id:
          type: string
          description: The unique identifier of the NPC character.
          example: "a96c6161-59f5-40f7-955e-459cd11"
        game_id:
          type: string
          description: The unique identifier of the game.
          example: "tx65BrETVN2vMrrUIrlV"
        world_id:
          type: string
          description: The unique identifier of the world.
          example: "PtUYW5bLMZNnXPN8qAUJ"
        messages:
          type: array
          description: An array of messages exchanged between the player and the NPC.
          xml:
            name: messages
            wrapped: true
          items:
            $ref: '#/components/schemas/Messages'
        user_context:
          type: object
          description: An object containing player-specific information for character context.
          properties:
            name:
              type: string
              description: The name of the player.
              example: "Juan"
            age:
              type: string
              description: The age of the player.
              example: "Adult"
            gender:
              type: string
              description: The gender of the player.
              example: "Male"
            race:
              type: string
              description: The race of the player.
              example: "Human"
            class:
              type: string
              description: The class of the player.
              example: "Warrior"
            level:
              type: integer
              description: The level of the player.
              example: 5
            status:
              type: string
              description: The status of the player.
              example: "Healthy"
            description:
              type: string
              description: A brief description of the player used for characterizing it or its status.
              example: "Smelly with a big sword and a wound in the chest"    
      xml:
        name: interaction
    Messages:
      type: object
      description: >
        A message object representing a single message in the conversation.
        The role indicates the sender ('user' for player messages, 'assistant' for NPC responses) and content holds the actual text.
      properties:
        role:
          type: string
          description: >
            The role of the message sender.
            Use 'user' for messages from the player and 'assistant' for NPC responses.
          enum:
            - user
            - assistant
          example: "user"
        content:
          type: string
          description: The text content of the message.
          example: "Hello Jakinen, my name is Juan, I'll take my sword and dance!"
      xml:
        name: messages_user
    ApiResponse:
      type: object
      description: >
        The ApiResponse schema represents the successful response from the API,
        including the NPC's response and any user-triggered events.
      properties:
        response:
          type: string
          description: The NPC's generated response.
          example: "Hello Juan, my name is Jakinen"
        user_events:
          type: array
          description: A list of events triggered by the user's input.
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the event.
                example: "take"
              item:
                type: string
                description: The item associated with the event, if any.
                nullable: true
                example: "sword"
        character_events:
          type: array
          description: A list of events triggered by the user's input.
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the event.
                example: "take"
              item:
                type: string
                description: The item associated with the event, if any.
                nullable: true
                example: "sword"
      example: 
        response: "Hello Juan, my name is Jakinen"
        user_events:
          - name: "take"
            item: "sword"
          - name: "dance"
            item: null
        character_events:
          - name: "give"
            item: "shield"
          - name: "attack"
            item: null
    MaxLength:
      type: object
      description: >
        The MaxLength schema is used when the response has been truncated due to reaching the maximum allowed length.
      properties:
        response:
          type: string
          description: The truncated response from the NPC.
          example: "Hello Juan, my name is Jakinen"
        user_events:
          type: array
          description: A list of events triggered by the user's input.
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the event.
                example: "take"
              item:
                type: string
                description: The item associated with the event.
                nullable: true
                example: "sword"
      example:
        response: "Hello Juan, my name is Jakinen"
        user_events:
          - name: "take"
            item: "sword"
          - name: "dance"
            item: null
    ErrorNoContext:
      type: string
      description: >
        Error indicating that no world context has been defined.
      example: "There is no world context defined."
    ErrorUsageLimit:
      type: string
      description: >
        Error indicating that the usage limit has been exceeded.
      example: "Usage limit exceeded. Please check your subscription or interactions limit."
    ErrorNotImplemented:
      type: string
      description: >
        Error indicating that the requested operation is not implemented.
      example: "Not implemented yet."
    ErrorResponse:
      type: object
      description: Standard error response schema.
      properties:
        message:
          type: string
          description: Detailed error message.
          example: "An error occurred"
    SessionRequest:
      type: object
      description: >
        Schema for creating a new session. Contains session key, game identifier, and player identifier.
      properties:
        session_key:
          type: string
          description: A unique key for the session.
          pattern: "^[a-zA-Z0-9_-]+$"
          maxLength: 50
          example: "campaign_nightfall"
        game_id:
          type: string
          description: The unique identifier for the game.
          maxLength: 50
          example: "game_12345"
        player_id:
          type: string
          description: The unique identifier for the player.
          format: uuidv4
          example: "550e8400-e29b-41d4-a716-446655440000"
      required:
        - session_key
        - game_id
        - player_id 
  requestBodies:
    Interaction:
      description: >
        The Interaction request body containing conversation details to be sent to the NPC.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interaction'
        application/xml:
          schema:
            $ref: '#/components/schemas/Interaction'
  securitySchemes:
    npcbuilder_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
